#pragma once

#include "Timer.h"
#include "Camera.h"
#include "Object.h"
#include "Shader.h"

class CPlayer : public CGameObject
{
protected:
	CCamera *m_pCamera;

	// 플레이어의 위치 벡터, x,y,z 축 벡터이다
	D3DXVECTOR3 m_d3dxvPosition;
	D3DXVECTOR3 m_d3dxvRight;
	D3DXVECTOR3 m_d3dxvUp;
	D3DXVECTOR3 m_d3dxvLook;

	// 플레이어가 로컬 x,y,z 축으로 얼마만큼 회전했는가를 나타낸다.
	float m_fPitch, m_fYaw, m_fRoll;

	// 플레이어의 이동속도를 나타내는 벡터이다
	D3DXVECTOR3 m_d3dxvVelocity;

	// 플레이어에 작용하는 중력을 나타내는 벡터이다
	D3DXVECTOR3 m_d3dxvGravity;

	// xy평면에서 한프레임동안 플레이어의 이동속도와 최대값을 나타낸다
	float m_fMaxVelocityXZ;

	// y축 방향으로 한프레임동안 플레이어의 이동속도와 최대값을 나타낸다.
	float m_fMaxVelocityY;

	// 플레이어에 작용하는 마찰력을 나타낸다
	float m_fFriction;

	// 플레이어의 위치가 바뀔때마다 호출되는 OnPlayerUpdated() 함수에서 사용하는 데이터이다
	LPVOID m_pPlayerUpdatedContext;

	// 카메라의 위치가 바뀔때마다 호출되는 OnCameraUpdated() 함수에서 사용하는 데이터이다
	LPVOID m_pCameraUpdatedContext;

	// 플레이어의 현재 카매라이다
//	CCamera *m_pCamera;

	// 3인칭 카메라일때 플레이어를 그리기 위해서 사용하는 쉐이더이다
	CPlayerShader *m_pShader;

public:
	CPlayer();
	~CPlayer();

	D3DXVECTOR3 GetPosition() {return m_d3dxvPosition;}
	D3DXVECTOR3 GetLookVector() {return m_d3dxvLook;}
	D3DXVECTOR3 GetUpVector() {return m_d3dxvUp;}
	D3DXVECTOR3 GetRightVector() {return m_d3dxvRight;}

	void SetFriction (float fFriction) {m_fFriction = fFriction;}
	void SetGravity (const D3DXVECTOR3& d3dxvGravity) {m_d3dxvGravity = d3dxvGravity;}
	void SetMaxVelocityXZ (float fMaxVelocity) {m_fMaxVelocityXZ = fMaxVelocity;}
	void SetMaxVelocityY (float fMaxVelocity) {m_fMaxVelocityY = fMaxVelocity;}
	void SetVelocity (const D3DXVECTOR3& d3dxvVelocity) {m_d3dxvVelocity = d3dxvVelocity;}

	void SetPosition (const D3DXVECTOR3& d3dxvPosition) { Move ((d3dxvPosition - m_d3dxvPosition), false);}

	const D3DXVECTOR3& GetVelocity() const {return (m_d3dxvVelocity);}
	float GetYaw() const {return m_fYaw;}
	float GetPitch() const {return m_fPitch;}
	float GetRoll() const {return m_fRoll;}

	CCamera *GetCamera() {return m_pCamera;}
	void SetCamera (CCamera *pCamera) {m_pCamera = pCamera;}

	// 플레이어를 이동하는 함수이다
	void Move (ULONG nDirection, float fDistance, bool bVelocity = false);
	void Move (const D3DXVECTOR3& d3dxvShift, bool bVelocity = false);
	void Move (float fxOffset = 0.0f, float fyOffset = 0.0f, float fzOffset = 0.0f);

	// 플레이어의 위치와 회전 정보를 경과시간에 따라 갱신하는 함수이다
	void Update (float fTimeElapsed);

	// 플레이어의 위치와 회전축으로부터 월드변환행렬을 생성하는 함수이다
	void RegenerateWorldMatrix ();

	// 플레이어의 위치가 바뀔때마다 호출되는 함수와 그 함수에서 사용하는 정보를 설정하는 함수
	virtual void OnplayerUpdated (float fTimeElapsed);
	void SetPlayerUpdateContext (LPVOID pContext) {m_pPlayerUpdatedContext = pContext;}

	// 카메라의 위치가 바뀔때마다 호출되는 함수와 그 함수에서 사용하는 정보를 설정하는 함수
	virtual void OnCameraUpdated (float fTimeElapsed);
	void SetCameraUpdatedContext (LPVOID pContext) {m_pCameraUpdatedContext = pContext;}

	// 플레이어의 상수 버퍼를 생성하고 갱신하는 멤버함수를 선언한다
	void CreateShaderVariables (ID3D11Device *pd3dDevice);
	void UpdateShaderVariables (ID3D11DeviceContext *pd3dDeviceContext);

	// 플레이어의 현재 카메라를 설정하고 반환하는 멤버함수를 선언한다.
	//void SetCamera (CCamera *pCamera) {m_pCamera = pCamera;}
	//CCamera *GetCamera() {return (m_pCamera);}

	// 카메마를 변경할 때 호출되는 함수이다
	CCamera *OnChangeCamera (ID3D11Device *pd3dDevice, DWORD nNewCameraMode, DWORD nCurrentCameraMode);
	virtual void ChangeCamera (ID3D11Device *pd3dDevice, DWORD nNewCameraMode, float fTimeElapsed) {}

	// 플레이어의 카메라가 3인칭 카메라가 될때 플레이어의 메쉬를 렌더링 한다
	virtual void Render (ID3D11DeviceContext *pd3dDeviceContext);
	
	void Rotate (float x, float y, float z);
};

class CAirplanePlayer  : public CPlayer
{
public:
	CAirplanePlayer (ID3D11Device *pd3dDevice);
	~CAirplanePlayer();

	virtual void ChangeCamera(ID3D11Device *pd3dDevice, DWORD nNewCameraMode, float fTimeElapsed);
	virtual void Render (ID3D11DeviceContext *pd3dDeviceContext);
};